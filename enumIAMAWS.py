#! /usr/bin/env python3
# Enumerate info about user account

import boto3
import json

# Create directory to store results
from pathlib import Path
Path("./02-IAMenum").mkdir(parents=True, exist_ok=True)

session = boto3.session.Session(profile_name='USER', region_name='REGION')
client = session.client('iam')

# Declare variables to store enumerated info
user_details = []
group_details = []
role_details = []
policy_details = []

# Make first API call
response = client.get_account_authorization_details()

# Store first set of data
if response.get('UserDetailList'):
	user_details.extend(response['UserDetailList'])
if response.get('GroupDetailList'):
	group_details.extend(response['GroupDetailList'])
if response.get('RoleDetailList'):
	role_details.extend(response['RoleDetailList'])
if response.get('Policies'):
	policy_details.extend(response['Policies'])

# Check for more data
while response['IsTruncated']:
	response = client.get_account_authorization_details(Marker=response['Marker'])
	# Store data again
	if response.get('UserDetailList'):
		user_details.extend(response['UserDetailList'])
	if response.get('GroupDetailList'):
		group_details.extend(response['GroupDetailList'])
	if response.get('RoleDetailList'):
		role_details.extend(response['RoleDetailList'])
	if response.get('Policies'):
		policy_details.extend(response['Policies'])

# Open each file and dump info
with open('./02-IAMenum/users.json', 'w+') as f:
	json.dump(user_details, f, indent=4, default=str)
with open('./02-IAMenum/groups.json', 'w+') as f:
	json.dump(group_details, f, indent=4, default=str)
with open('./02-IAMenum/roles.json', 'w+') as f:
	json.dump(role_details, f, indent=4, default=str)
with open('./02-IAMenum/policies.json', 'w+') as f:
	json.dump(policy_details, f, indent=4, default=str)

# Analyze policies related to user
username = client.get_user()['User']['UserName']
current_user = None
for user in user_details:
	if user['UserName'] == username:
		current_user = user
		break

# Create empy list to store policies
my_policies = []

# Check for attached inline policies
if current_user.get('UserPolicyList'):
	# Iterate through to pull documents
	for policy in current_user['UserPolicyList']:
		# Add policy to list
		my_policies.append(policy['PolicyDocument'])

# Check for attached managed policies
if current_user.get('AttachedManagedPolicies'):
	# Iterate through list
	for managed_policy in user['AttachedManagedPolicies']:
		# Note policy ARN for future reference
		policy_arn = managed_policy['PolicyArn']
	# Iterate through policies stored in policy_details to find policy
	for policy_detail in policy_details:
		# Check if found
		if policy_detail['Arn'] == policy_arn:
			# Determine version to know what to grab
			default_version = policy_detail['DefaultVersionId']
			# Iterate version to find one needed
			for version in policy_detail['PolicyVersionList']:
				# Check for match
				if version['VersionId'] == default_version:
					# Add policy to variable
					my_policies.append(version['Document'])
					# Found so exit loop
					break
			# Found so exit loop
			break

# Check for groups
if current_user.get('GroupList'):
	# Iterate through groups
	for user_group in current_user['GroupList']:
		# Iterate through groups to find this one
		for group in group_details:
			if group['GroupName'] == user_group:
				# Check for inline policies
				if group.get('GroupPolicyList'):
					# Iterate through inline policies
					for inline_policy in group['GroupPolicyList']:
						my_policies.append(inline_policy['PolicyDocuments'])
				# Check for managed policies
				if group.get('AttachedManagedPolicies'):
					for managed_policy in group['AttachedManagedPolicies']:
						# Grab ARN
						policy_arn = managed_policy['PolicyArn']
						# Find policy in list
						for policy in policy_details:
							if policy['Arn'] == policy_arn:
								default_version = policy['DefaultVersionId']
								for version in policy['PolicyVersionList']:
									if version['VersionId'] == default_version:
										my_policies.append(version['Document'])
										break
							break

with open('./02-IAMenum/my-user-permissions.json', 'w+') as f:
	json.dump(my_policies, f, indent=4, default=str)
